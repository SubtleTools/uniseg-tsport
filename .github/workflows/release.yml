name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (test without publishing)"
        required: false
        default: "false"
        type: boolean

env:
  NODE_VERSION: 20

jobs:
  release:
    name: Release & Publish
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      go_version: ${{ steps.version.outputs.go_version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: bun install

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, use package.json version
            TAG=$(node -p "require('./package.json').version")
          else
            # For tag push, extract from tag
            TAG=${GITHUB_REF#refs/tags/v}
          fi

          echo "version=$TAG" >> $GITHUB_OUTPUT

          # Get Go source version
          GO_VERSION=$(node -p "require('./package.json').goSourceVersion || 'unknown'")
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT

          # Check if it's a prerelease (contains -alpha, -beta, -rc, -tsport, etc.)
          if [[ "$TAG" == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify package version matches tag
        if: github.event_name == 'push'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Package version ($PACKAGE_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Version validation passed"

      - name: Run validation tests
        run: |
          bun run lint
          bun run build
          bun run test

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🏃 DRY RUN MODE - Not publishing to NPM or creating release"
          npm pack --dry-run
          echo "✅ Package would be published successfully"
          echo "✅ Would create GitHub release v${{ steps.version.outputs.version }}"

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📦 Publishing @tsports/uniseg@${{ steps.version.outputs.version }}"
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --access public --tag latest

      - name: Create release tarball
        if: github.event.inputs.dry_run != 'true'
        run: |
          tar -czf uniseg-${{ steps.version.outputs.version }}.tar.gz \
            dist/ package.json README.md LICENSE CHANGELOG.md

      - name: Generate release notes
        if: github.event.inputs.dry_run != 'true'
        id: release-notes
        run: |
          cat > release_notes.md << EOF
          ## @tsports/uniseg v${{ steps.version.outputs.version }}

          A TypeScript port of the uniseg library with 100% API compatibility.

          ### 📦 Installation
          \`\`\`bash
          npm install @tsports/uniseg@${{ steps.version.outputs.version }}
          # or
          bun add @tsports/uniseg@${{ steps.version.outputs.version }}
          \`\`\`

          ### 📋 Version Information
          - **TSPort Version**: ${{ steps.version.outputs.version }}
          - **Go Source Version**: ${{ steps.version.outputs.go_version }}
          - **Package**: [@tsports/uniseg](https://www.npmjs.com/package/@tsports/uniseg)

          ### ✨ Features
          - 🔢 Unicode grapheme cluster segmentation and width calculation
          - 📏 Text boundary detection (word, sentence, line breaking)
          - 🌍 Comprehensive Unicode support with latest standards
          - 📊 East Asian width property handling for proper terminal display
          - 🔧 Both TypeScript and Go-style APIs
          - 📘 Full TypeScript type definitions
          - ✅ Comprehensive test coverage with Go compatibility verification

          ### 🔗 Compatibility
          - ✅ 100% API compatibility with Go source version
          - ✅ All tests passing across platforms
          - ✅ TypeScript strict mode compliant
          - ✅ Node.js 18+ support
          - ✅ ESM module format with tree-shaking

          ### 📚 Documentation
          - [API Documentation](https://subtletools.github.io/uniseg-tsport/)
          - [GitHub Repository](https://github.com/SubtleTools/uniseg-tsport)
          - [NPM Package](https://www.npmjs.com/package/@tsports/uniseg)

          ---

          Published successfully to NPM! 🎉

          See the [commit history](https://github.com/SubtleTools/uniseg-tsport/commits/v${{ steps.version.outputs.version }}) for detailed changes.
          EOF

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: "Release v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          files: uniseg-${{ steps.version.outputs.version }}.tar.gz
          prerelease: ${{ steps.version.outputs.is_prerelease }}
          generate_release_notes: true
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.version.outputs.version) || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
