name: Publish to NPM

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Build project
        run: bun run build

      - name: Extract version from release
        id: version
        run: |
          # Get version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          # Get Go source version
          GO_VERSION=$(node -p "require('./package.json').goSourceVersion || 'unknown'")
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # TSPort versions are prereleases, npm handles them correctly
          npm publish --access public

      - name: Create Release Assets
        run: |
          # Create tarball with package name and version
          tar -czf @tsports/uniseg-${{ steps.version.outputs.version }}.tar.gz \
            dist/ package.json README.md LICENSE

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./@tsports/uniseg-${{ steps.version.outputs.version }}.tar.gz
          asset_name: uniseg-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Update Release Description
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
            });

            const version = "${{ steps.version.outputs.version }}";
            const goVersion = "${{ steps.version.outputs.go_version }}";

            const updatedBody = `${release.body}

            ### TSPort Version Info
            - **TSPort Version**: ${version}
            - **Go Source Version**: ${goVersion}
            - **Package**: @tsports/uniseg

            ### Installation
            \`\`\`bash
            npm install @tsports/uniseg@${version}
            \`\`\`

            ### Compatibility
            - ✅ 100% API compatibility with Go source version
            - ✅ All tests passing
            - ✅ TypeScript strict mode compliant
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: updatedBody,
            });
